{"ast":null,"code":"class Auth {\n  constructor(_ref) {\n    let {\n      baseUrl,\n      headers\n    } = _ref;\n    this._baseUrl = baseUrl;\n    this._headers = headers;\n  }\n  _checkResponse(res) {\n    console.log('Server Response:', res);\n    if (res.ok || res.status === 304) {\n      return res.json();\n    }\n    return Promise.reject(`Ошибка: ${res.status}`);\n  }\n  _request(url, options) {\n    return fetch(url, options).then(res => {\n      res.clone().json().then(data => console.log(data));\n      return this._checkResponse(res);\n    });\n  }\n  registerUser(password, email) {\n    return this._request(`${this._baseUrl}/signup`, {\n      method: 'POST',\n      headers: this._headers,\n      body: JSON.stringify({\n        password,\n        email\n      }),\n      credentials: 'include'\n    });\n  }\n  loginUser(password, email) {\n    return this._request(`${this._baseUrl}/signin`, {\n      method: 'POST',\n      headers: this._headers,\n      body: JSON.stringify({\n        password,\n        email\n      }),\n      credentials: 'include'\n    });\n  }\n  getContent() {\n    return this._request(`${this._baseUrl}/users/me`, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      credentials: 'include'\n    });\n  }\n}\nconst auth = new Auth({\n  baseUrl: 'http://localhost:4000',\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  credentials: 'include'\n});\nexport default auth;","map":{"version":3,"names":["Auth","constructor","_ref","baseUrl","headers","_baseUrl","_headers","_checkResponse","res","console","log","ok","status","json","Promise","reject","_request","url","options","fetch","then","clone","data","registerUser","password","email","method","body","JSON","stringify","credentials","loginUser","getContent","auth"],"sources":["C:/Users/Maxim/dev/mesto-full/frontend/src/utils/auth.js"],"sourcesContent":["class Auth {\r\n  constructor({ baseUrl, headers }) {\r\n    this._baseUrl = baseUrl;\r\n    this._headers = headers;\r\n  }\r\n\r\n  _checkResponse(res) {\r\n    console.log('Server Response:', res);\r\n    if (res.ok || res.status === 304) {\r\n      return res.json();\r\n    }\r\n\r\n    return Promise.reject(`Ошибка: ${res.status}`);\r\n  }\r\n\r\n  _request(url, options) {\r\n    return fetch(url, options).then((res) => {\r\n      res\r\n        .clone()\r\n        .json()\r\n        .then((data) => console.log(data));\r\n      return this._checkResponse(res);\r\n    });\r\n  }\r\n\r\n  registerUser(password, email) {\r\n    return this._request(`${this._baseUrl}/signup`, {\r\n      method: 'POST',\r\n      headers: this._headers,\r\n      body: JSON.stringify({ password, email }),\r\n      credentials: 'include',\r\n    });\r\n  }\r\n\r\n  loginUser(password, email) {\r\n    return this._request(`${this._baseUrl}/signin`, {\r\n      method: 'POST',\r\n      headers: this._headers,\r\n      body: JSON.stringify({ password, email }),\r\n      credentials: 'include',\r\n    });\r\n  }\r\n\r\n  getContent() {\r\n    return this._request(`${this._baseUrl}/users/me`, {\r\n      method: 'GET',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      credentials: 'include',\r\n    });\r\n  }\r\n}\r\n\r\nconst auth = new Auth({\r\n  baseUrl: 'http://localhost:4000',\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n  credentials: 'include',\r\n});\r\n\r\nexport default auth;\r\n"],"mappings":"AAAA,MAAMA,IAAI,CAAC;EACTC,WAAWA,CAAAC,IAAA,EAAuB;IAAA,IAAtB;MAAEC,OAAO;MAAEC;IAAQ,CAAC,GAAAF,IAAA;IAC9B,IAAI,CAACG,QAAQ,GAAGF,OAAO;IACvB,IAAI,CAACG,QAAQ,GAAGF,OAAO;EACzB;EAEAG,cAAcA,CAACC,GAAG,EAAE;IAClBC,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAEF,GAAG,CAAC;IACpC,IAAIA,GAAG,CAACG,EAAE,IAAIH,GAAG,CAACI,MAAM,KAAK,GAAG,EAAE;MAChC,OAAOJ,GAAG,CAACK,IAAI,CAAC,CAAC;IACnB;IAEA,OAAOC,OAAO,CAACC,MAAM,CAAE,WAAUP,GAAG,CAACI,MAAO,EAAC,CAAC;EAChD;EAEAI,QAAQA,CAACC,GAAG,EAAEC,OAAO,EAAE;IACrB,OAAOC,KAAK,CAACF,GAAG,EAAEC,OAAO,CAAC,CAACE,IAAI,CAAEZ,GAAG,IAAK;MACvCA,GAAG,CACAa,KAAK,CAAC,CAAC,CACPR,IAAI,CAAC,CAAC,CACNO,IAAI,CAAEE,IAAI,IAAKb,OAAO,CAACC,GAAG,CAACY,IAAI,CAAC,CAAC;MACpC,OAAO,IAAI,CAACf,cAAc,CAACC,GAAG,CAAC;IACjC,CAAC,CAAC;EACJ;EAEAe,YAAYA,CAACC,QAAQ,EAAEC,KAAK,EAAE;IAC5B,OAAO,IAAI,CAACT,QAAQ,CAAE,GAAE,IAAI,CAACX,QAAS,SAAQ,EAAE;MAC9CqB,MAAM,EAAE,MAAM;MACdtB,OAAO,EAAE,IAAI,CAACE,QAAQ;MACtBqB,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAEL,QAAQ;QAAEC;MAAM,CAAC,CAAC;MACzCK,WAAW,EAAE;IACf,CAAC,CAAC;EACJ;EAEAC,SAASA,CAACP,QAAQ,EAAEC,KAAK,EAAE;IACzB,OAAO,IAAI,CAACT,QAAQ,CAAE,GAAE,IAAI,CAACX,QAAS,SAAQ,EAAE;MAC9CqB,MAAM,EAAE,MAAM;MACdtB,OAAO,EAAE,IAAI,CAACE,QAAQ;MACtBqB,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAEL,QAAQ;QAAEC;MAAM,CAAC,CAAC;MACzCK,WAAW,EAAE;IACf,CAAC,CAAC;EACJ;EAEAE,UAAUA,CAAA,EAAG;IACX,OAAO,IAAI,CAAChB,QAAQ,CAAE,GAAE,IAAI,CAACX,QAAS,WAAU,EAAE;MAChDqB,MAAM,EAAE,KAAK;MACbtB,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACD0B,WAAW,EAAE;IACf,CAAC,CAAC;EACJ;AACF;AAEA,MAAMG,IAAI,GAAG,IAAIjC,IAAI,CAAC;EACpBG,OAAO,EAAE,uBAAuB;EAChCC,OAAO,EAAE;IACP,cAAc,EAAE;EAClB,CAAC;EACD0B,WAAW,EAAE;AACf,CAAC,CAAC;AAEF,eAAeG,IAAI"},"metadata":{},"sourceType":"module","externalDependencies":[]}